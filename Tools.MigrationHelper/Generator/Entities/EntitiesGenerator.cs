// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Tools.MigrationHelper.Generator.Entities
{
    using System.Collections.Generic;
    using Tools.MigrationHelper.EntitySerializer;
    using Platform.PrimaryEntities.Reference;
    using Platform.PrimaryEntities.DbEnums;
    using Platform.PrimaryEntities.Common.DbEnums;
    using Platform.PrimaryEntities.Common.Interfaces;
    using System.Linq;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class EntitiesGenerator : EntitiesGeneratorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing Platform.BusinessLogic.En" +
                    "tityTypes;\r\nusing System.ComponentModel.DataAnnotations.Schema;\r\n");
            
            #line 15 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
 foreach(var str in GetUsings()) {
            
            #line default
            #line hidden
            
            #line 15 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(str));
            
            #line default
            #line hidden
            
            #line 15 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\nnamespace ");
            
            #line 17 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(_namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t");
            
            #line 19 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("// Это автоматически сгенерированный класс, изменения будут уничтожены при следующей генерации"));
            
            #line default
            #line hidden
            this.Write("\r\n\tpublic partial class ");
            
            #line 20 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetEntityName()));
            
            #line default
            #line hidden
            
            #line 20 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetEntityType(_entity.IdEntityType)));
            
            #line default
            #line hidden
            this.Write(" \r\n\t{\r\n\t");
            
            #line 22 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
 foreach(EntityField Field in _entity.Fields.Where(w=>w.IdCalculatedFieldType == null)){ 
            
            #line default
            #line hidden
            
            #line 22 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
 if(!string.IsNullOrEmpty(Field.Caption)) {
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 23 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("/// <summary>"));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t");
            
            #line 24 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("/// " + Field.Caption));
            
            #line default
            #line hidden
            this.Write("\r\n\t\t");
            
            #line 25 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture("/// </summary>"));
            
            #line default
            #line hidden
            this.Write("\r\n\t");
            
            #line 26 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\t");
            
            #line 27 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeAndName(Field)));
            
            #line default
            #line hidden
            this.Write("\r\n\r\n\t");
            
            #line 29 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic ");
            
            #line 31 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetEntityName()));
            
            #line default
            #line hidden
            this.Write("()\r\n\t\t{\r\n");
            
            #line 33 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
 foreach(var Field in _entity.Fields.Where(w=>(new int[]{ 8, 9, 13, 18}).Contains(w.IdEntityFieldType))){ 
            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 34 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
 if(GetEntity(Field.IdEntityLink) != null && GetEntity(Field.IdEntityLink).GenerateEntityClass) {
            
            #line default
            #line hidden
            this.Write("\t\t\tthis.");
            
            #line 35 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(FirstToUp(Field.Name)));
            
            #line default
            #line hidden
            this.Write(" = new List<");
            
            #line 35 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetType(GetEntity(Field.IdEntityLink))));
            
            #line default
            #line hidden
            this.Write(">();\r\n\t\t\t");
            
            #line 36 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
 } 
            
            #line default
            #line hidden
            
            #line 37 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
 } 
            
            #line default
            #line hidden
            this.Write(" \r\n\t\t}\r\n\t}\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 42 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
 public string GetTypeAndName(EntityField Field)
{
	var linkedEntity = GetEntity(Field.IdEntityLink);
	var fieldName = FirstToUp(Field.Name);

	switch(Field.IdEntityFieldType)
	{
		case 1 : return "public bool " + fieldName + "{get; set;}";break;
		case 2 : return "public string " + fieldName + "{get; set;}";break;
		case 3 : return "public " + (fieldName == "Id" ? "override Int32 Id " : NullableFieldType("Int32",Field.AllowNull) + fieldName) + "{get; set;}";break;
		case 4 : return "public " + NullableFieldType("System.Int64",Field.AllowNull) + fieldName + "{get; set;}";break;
		case 5 : return "public " + NullableFieldType("decimal",Field.AllowNull) + fieldName + "{get; set;}";break;
		case 6 : return "public " + NullableFieldType("DateTime",Field.AllowNull) + fieldName + "{get; set;}";break;

		case 7 : if(linkedEntity != null)
					{
						if(linkedEntity.IdEntityType == (byte)EntityType.Enum)
							return "public " + NullableFieldType("byte",Field.AllowNull) + fieldName + "{get; set;}" 
							+ @"
							[NotMapped] 
							public virtual " + NullableFieldType(GetType(linkedEntity),Field.AllowNull) + " "+ ModifyName(fieldName) + 
							@" {
								get { return ("+ NullableFieldType(GetType(linkedEntity),Field.AllowNull) + ")this."+ fieldName + @"; } 
								set { this."+ fieldName + " = ("+ NullableFieldType("byte",Field.AllowNull) + @") value; }
							}";

						return "public " + Override(linkedEntity) + NullableFieldType("int",Field.AllowNull) + fieldName + "{get; set;}" 
							+ ((_entity.IdEntityType == (byte)EntityType.Tool || _entity.IdEntityType == (byte)EntityType.Document) && linkedEntity.Name == "DocStatus" 
								?  "" 
								: " public virtual " + GetType(linkedEntity) + " "+ ModifyName(fieldName) + "{get; set;}");
						break;
					}
					return "";break;

		case 8 : if(linkedEntity != null && linkedEntity.GenerateEntityClass)
					{return "public virtual ICollection<"+ GetType(linkedEntity) + "> " + fieldName + "{get; set;}";break;}
					return "";break;

		case 9 : if(linkedEntity != null && linkedEntity.GenerateEntityClass)
					{return "public virtual ICollection<"+ GetType(linkedEntity) + "> " + fieldName + "{get; set;}";break;}
					return "";break;

		case 10: return "";break;
		case 11: return "";break;
		case 12: return "";break;

		case 13 : if(linkedEntity != null && linkedEntity.GenerateEntityClass)
					{return "public virtual ICollection<"+ GetType(linkedEntity) + "> " + fieldName + "{get; set;}";break;}
					return "";break;

		case 14 : return "public " + NullableFieldType("Guid",Field.AllowNull) + fieldName + "{get; set;}";break;
		case 15: return "public " + NullableFieldType("byte",Field.AllowNull) + fieldName + "{get; set;}";break;
		case 16: return "public " + NullableFieldType("Int16",Field.AllowNull) + fieldName + "{get; set;}";break;
		case 17: return "public string " + fieldName + "{get; set;}";break;

		case 18: if(linkedEntity != null)
					{return "public virtual ICollection<"+ GetType(linkedEntity) + "> " + fieldName + "{get; set;}";break;}
					return "";break;
		default : return "/*Ошибка при генерации: тип сущности " + Field.IdEntityFieldType +"*/";break;
	} 
} 
        
        #line default
        #line hidden
        
        #line 104 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
 public string GetEntityType(int IdEntityType)
{
	switch(IdEntityType)
	{
		case 3 : return " : ReferenceEntity";break;
		case 4 : return " : TablePartEntity";break;
		case 5 : return " : MultilinkEntity";break;
		case 6 : return " : DocumentEntity";break;
		case 7 : return " : ToolEntity";break;
		case 8 : return " : RegistryEntity";break;
		case 9 : return " : ReportEntity";break;
		default : return "/*Ошибка при генерации: тип сущности " + IdEntityType +"*/";break;
	}
} 
        
        #line default
        #line hidden
        
        #line 121 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
public string ModifyName(string str)
{
	return char.ToUpper(str[2]) + str.Substring(3);
}
        
        #line default
        #line hidden
        
        #line 126 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
public string NullableFieldType(string fieldType, bool isNullable)
{
	return isNullable ? fieldType + "? " : fieldType + " ";
}
        
        #line default
        #line hidden
        
        #line 131 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
public Entity GetEntity(int? idEntity)
{
	if(idEntity == null)
		return null;
	var entity = _entities.FirstOrDefault(w => w.Id == idEntity);
	return entity;
}
        
        #line default
        #line hidden
        
        #line 139 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
public string FirstToUp(string str)
{
	//if(entity.Name == "DocStatus")
		return char.ToUpper(str[0]) + str.Substring(1);
	//else
		//return str;
}
        
        #line default
        #line hidden
        
        #line 147 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
public string Override(Entity entity)
{
	if(entity.Name == "DocStatus" && (_entity.IdEntityType == (byte)EntityType.Document || _entity.IdEntityType == (byte)EntityType.Tool))
		return "override ";
	else
		return "";
}
        
        #line default
        #line hidden
        
        #line 155 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
public string GetEntityName()
{
	return _entity.IdEntityType == (byte)EntityType.Multilink ? _entity.Schema + _entity.Name : _entity.Name;
}
        
        #line default
        #line hidden
        
        #line 160 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
public string GetEntityName(Entity entity)
{
	return entity.IdEntityType == (byte)EntityType.Multilink ? entity.Schema + entity.Name : entity.Name;
}
        
        #line default
        #line hidden
        
        #line 165 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
public string GetType(Entity entity)
{
	if(entity.IdProject != (int)SolutionProject.Tools_MigrationHelper_Core)
		return string.Format( "{0}.{1}.{2}", GetProjectName(entity.IdProject), (entity.EntityType == EntityType.Enum ? "DbEnums" : entity.EntityType.ToString()), GetEntityName(entity));
	if(entity.IdProject == (int)SolutionProject.Tools_MigrationHelper_Core)
		return GetEntityName(entity);
	return "";
}
        
        #line default
        #line hidden
        
        #line 174 "D:\SBOR\Platform3\sbor3\Tools.MigrationHelper\Generator\Entities\EntitiesGenerator.tt"
public string GetProjectName(int idProject)
{
	return ((SolutionProject) idProject).ToString().Replace('_','.');
}
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class EntitiesGeneratorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
