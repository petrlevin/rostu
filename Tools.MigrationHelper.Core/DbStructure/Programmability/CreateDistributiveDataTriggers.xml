<?xml version="1.0" encoding="utf-8"?>
<NewDataSet>
  <xs:schema id="NewDataSet" xmlns="" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xs:element name="NewDataSet" msdata:IsDataSet="true" msdata:MainDataTable="ref.Programmability" msdata:UseCurrentLocale="true">
      <xs:complexType>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element name="ref.Programmability">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="id" msdata:ReadOnly="true" msdata:AutoIncrement="true" type="xs:int" />
                <xs:element name="Schema">
                  <xs:simpleType>
                    <xs:restriction base="xs:string">
                      <xs:maxLength value="50" />
                    </xs:restriction>
                  </xs:simpleType>
                </xs:element>
                <xs:element name="Name">
                  <xs:simpleType>
                    <xs:restriction base="xs:string">
                      <xs:maxLength value="100" />
                    </xs:restriction>
                  </xs:simpleType>
                </xs:element>
                <xs:element name="CreateCommand">
                  <xs:simpleType>
                    <xs:restriction base="xs:string">
                      <xs:maxLength value="2147483647" />
                    </xs:restriction>
                  </xs:simpleType>
                </xs:element>
                <xs:element name="idProgrammabilityType" type="xs:unsignedByte" />
                <xs:element name="Order" minOccurs="0">
                  <xs:simpleType>
                    <xs:restriction base="xs:string">
                      <xs:maxLength value="5" />
                    </xs:restriction>
                  </xs:simpleType>
                </xs:element>
                <xs:element name="idProject" type="xs:int" minOccurs="0" />
                <xs:element name="isDisabled" type="xs:boolean" />
              </xs:sequence>
            </xs:complexType>
          </xs:element>
        </xs:choice>
      </xs:complexType>
      <xs:unique name="Constraint1" msdata:PrimaryKey="true">
        <xs:selector xpath=".//ref.Programmability" />
        <xs:field xpath="id" />
      </xs:unique>
    </xs:element>
  </xs:schema>
  <ref.Programmability>
    <id>-1744830435</id>
    <Schema>dbo</Schema>
    <Name>CreateDistributiveDataTriggers</Name>
    <CreateCommand>
      CREATE PROCEDURE [dbo].[CreateDistributiveDataTriggers]
      AS
      BEGIN
      DECLARE @entityId int
      DECLARE @name nvarchar(100)
      DECLARE @schema nvarchar(6)
      DECLARE @sql nvarchar(4000)

      IF (NOT EXISTS( SELECT * FROM sysobjects Objects
      INNER JOIN sys.tables Tables ON Tables.object_id = Objects.id
      WHERE [Objects].[Name]='DistributiveDataInfo' AND
      SCHEMA_NAME(Tables.schema_id)= 'dbo'))
      BEGIN

      CREATE TABLE [dbo].[DistributiveDataInfo]
      ([enabled] [bit] NOT NULL)
      END


      DECLARE entities CURSOR
      FOR SELECT e.id,e.Name,
      CASE e.idEntityType
      WHEN 3	THEN 'ref'
      WHEN 4	THEN 'tp'
      WHEN 6 THEN 'doc'
      WHEN 7 THEN 'tool'
      WHEN  5 THEN 'ml'
      ELSE ''
      END as [schema]

      FROM [ref].[Entity] e WHERE (e.idEntityType=3 OR e.idEntityType=4 OR e.idEntityType=6 OR  e.idEntityType=7 OR e.idEntityType=5 ) AND (e.Name!='DistributiveData' ) AND (e.Name!='DistributiveDataMultiLink' ) AND (e.Name!='Entity')
      OPEN entities
      FETCH NEXT FROM entities
      INTO @entityId, @name, @schema

      WHILE @@FETCH_STATUS = 0
      BEGIN
      exec [dbo].[CreateDistributiveDataTrigger] @entityId, @name, @schema
      FETCH NEXT FROM entities
      INTO @entityId,@name, @schema

      END
      CLOSE entities
      DEALLOCATE entities

      SET @entityId = (SELECT id FROM [ref].[Entity] where Name = 'Entity')
      SET @schema = 'ref'
      SET @name= 'Entity'
      exec [dbo].[CreateDistributiveDataTrigger]  @entityId, @name, @schema
      DECLARE @Create_Alter nvarchar(100)
      IF (NOT EXISTS( SELECT  * from sys.triggers  WHERE name='Entity_createDistributiveDataTriggers'))
      BEGIN
      SET @Create_Alter = 'CREATE'
      END
      ELSE
      BEGIN
      SET @Create_Alter = 'ALTER'
      END



      SET @sql = ''+
      @Create_Alter +' TRIGGER [ref].[Entity_createDistributiveDataTriggers] ON [ref].[Entity] AFTER INSERT
      AS
      BEGIN
      declare @entityId int
      declare @name varchar(500)
      declare @schema varchar(5)
      DECLARE @sql nvarchar(4000)
      DECLARE @trigerName nvarchar(400)
      DECLARE entities CURSOR
      FOR SELECT e.id,e.Name,
      CASE e.idEntityType
      WHEN 3	THEN ''ref''
      WHEN 4	THEN ''tp''
      WHEN 6 THEN ''doc''
      WHEN 7 THEN ''tool''
      WHEN  5 THEN ''ml''
      ELSE ''''
      END as [schema]

      FROM INSERTED e WHERE (e.idEntityType=3 OR e.idEntityType=4 OR e.idEntityType=6 OR  e.idEntityType=7 OR  e.idEntityType=5 ) AND (e.Name!=''DistributiveData'' ) AND (e.Name!=''DistributiveDataMultiLink'') AND (e.Name!=''Entity'')
      OPEN entities
      FETCH NEXT FROM entities
      INTO @entityId, @name, @schema

      WHILE @@FETCH_STATUS = 0
      BEGIN
      exec [dbo].[CreateDistributiveDataTrigger] @entityId, @name, @schema
      FETCH NEXT FROM entities
      INTO @entityId,@name, @schema
      END
      CLOSE entities
      DEALLOCATE entities
      END
      '
      PRINT @sql
      exec(@sql)
      exec sp_settriggerorder @triggername = '[ref].Entity_createDistributiveDataTriggers',
      @order = 'last',
      @stmttype = 'insert'


      IF (NOT EXISTS( SELECT  * from sys.triggers  WHERE name='EntityField_createDistributiveDataTriggers'))
      BEGIN
      SET @Create_Alter = 'CREATE'
      END
      ELSE
      BEGIN
      SET @Create_Alter = 'ALTER'
      END

      SET @sql = ''+
      @Create_Alter +' TRIGGER [ref].[EntityField_createDistributiveDataTriggers] ON [ref].[EntityField] AFTER INSERT, UPDATE
      AS
      BEGIN
      declare @entityId int
      declare @name varchar(500)
      declare @schema varchar(5)
      DECLARE @sql nvarchar(4000)
      DECLARE @trigerName nvarchar(400)
      DECLARE entities CURSOR
      FOR SELECT e.id,e.Name


      FROM INSERTED ee INNER JOIN [ref].[Entity] e ON (e.[id] = [ee].[idEntity]) WHERE (ee.idEntityFieldType =7 ) AND (e.idEntityType = 5 )
      OPEN entities
      FETCH NEXT FROM entities
      INTO @entityId, @name

      WHILE @@FETCH_STATUS = 0
      BEGIN
      exec [dbo].[CreateDistributiveDataTriggerMultiLink] @entityId, @name
      FETCH NEXT FROM entities
      INTO @entityId,@name
      END
      CLOSE entities
      DEALLOCATE entities
      END
      '
      PRINT @sql
      exec(@sql)
      exec sp_settriggerorder @triggername = '[ref].EntityField_createDistributiveDataTriggers',
      @order = 'last',
      @stmttype = 'insert'



      END

    </CreateCommand>
    <idProgrammabilityType>1</idProgrammabilityType>
    <Order></Order>
    <idProject>100</idProject>
    <isDisabled>false</isDisabled>
  </ref.Programmability>
</NewDataSet>